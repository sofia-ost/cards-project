{"version":3,"sources":["Card/index.jsx","static/images/close.svg","Modal/index.jsx","static/images/spinner.svg","CardBlock/index.jsx","App.js","index.js"],"names":["Card","setModalActive","setCardData","value","className","category","name","price","onClick","useInput","inilialValue","validations","useState","setValue","isDirty","setDirty","valid","isEmpty","setEmpty","nameError","setNameError","numberError","setNumberError","minLengthError","setMinLengthError","inputValid","setInputValid","useEffect","validation","test","length","useValidation","onChange","e","target","onBlur","Modal","active","setActive","result","isName","number","isNumber","minLength","stopPropagation","src","Close","alt","onSubmit","preventDefault","console","log","setTimeout","type","placeholder","disabled","CardBlock","cheapestProduct","modalActive","cardData","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","reduce","prev","next","index","array","find","item","Math","min","message","map","Spinner","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb57d818.chunk.js","sourcesContent":["import \"./style/index.scss\";\n\nexport const Card = ({setModalActive, setCardData, value}) => {\n\n    const handleClick = () => {\n        setModalActive(true)\n        setCardData(value)\n    }\n\n    return (\n        <div className=\"card\">\n            <p className=\"card__category category\">{value.category}</p>\n            <h2 className=\"card__name\">{value.name}</h2>\n            <div className=\"card__footer\">\n                <span className=\"card__price price\">{value.price}</span>\n                <button className=\"button button--samll card__button\" onClick={handleClick}>Buy</button>\n            </div>\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/close.61bc0d9f.svg\";","import { useEffect, useState } from \"react\";\nimport Close from \"../static/images/close.svg\";\nimport \"./style/index.scss\";\n\nconst useValidation = (value, validations) => {\n\n    const [isEmpty, setEmpty] = useState(true);\n    const [nameError, setNameError] = useState(false);\n    const [numberError, setNumberError] = useState(false);\n    const [minLengthError, setMinLengthError] = useState(false);\n    const [inputValid, setInputValid] = useState(false)\n\n    useEffect(() => {\n        for (const validation in validations) {\n            switch (validation) {\n                case 'isEmpty':\n                    value ? setEmpty(false) : setEmpty(true);\n                    break;\n                case \"isName\": \n                    const regLetter = /^[A-Za-z]+$/g;\n                    regLetter.test(value) ? setNameError(false) : setNameError(true);\n                    break;\n                case \"isNumber\": \n                    const regNumber = /^[0-9]*$/g;\n                    regNumber.test(value) ? setNumberError(false) : setNumberError(true);\n                    break;\n                case \"minLength\": \n                    value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false);\n                    break;\n            }\n        }\n    }, [value])\n\n    useEffect(() => {\n        if (isEmpty || nameError || numberError || minLengthError) {\n            setInputValid(false)\n        } else {\n            setInputValid(true)\n        }\n    }, [isEmpty, nameError, numberError, minLengthError])\n\n    return {\n        isEmpty,\n        nameError,\n        numberError,\n        minLengthError,\n        inputValid\n    }\n}\n\nconst useInput = (inilialValue, validations) => {\n    const [value, setValue] = useState(inilialValue);\n    const [isDirty, setDirty] = useState(false);\n    const valid = useValidation(value, validations)\n\n    const onChange = (e) => {\n        setValue(e.target.value)\n    }\n\n    const onBlur = (e) => {\n        setDirty(true)\n    }\n\n    return {\n        value,\n        setValue,\n        setDirty,\n        onChange,\n        onBlur,\n        isDirty,\n        ...valid\n    }\n}\n\nexport const Modal = ({active, setActive, result}) => {\n\n    const name = useInput('', {isEmpty: true, isName: true});\n    const number = useInput('', {isEmpty: true, isNumber: true, minLength: 12});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        console.log(\n            \"Name: \" + name.value,\n            \"\\nNumber: \" + number.value,\n            \"\\nProduct Name: \" + result.name,\n            \"\\nCategory: \" + result.category,\n            \"\\nPrice: \" + result.price + \"$\"\n        );\n\n        setTimeout(() => {\n            setActive(false);\n            name.setValue('');\n            name.setDirty(false);\n            number.setValue('');\n            number.setDirty(false)\n        }, 1000);\n    }\n\n    return (\n        <div className={`modal ${active ? \"active\" : \"\"}`} onClick={() => setActive(false)}>\n            <div className={active ? \"modal-content active\" : \"popup-content\"} onClick={e => e.stopPropagation()}>\n                <button className=\"modal__close\" onClick={() => setActive(false)}>\n                    <img src={Close} alt=\"close\" />\n                </button>\n                <form className=\"form\" onSubmit={handleSubmit}>\n                    <p className=\"modal__category category\" value={result.category}>{result.category}</p>\n                    <h2 className=\"modal__name\" value={result.name}>{result.name}</h2>\n                    <span className=\"modal__price price\" value={result.price}>{result.price}</span>\n\n                    <div className={`form__field ${(name.isDirty && name.isEmpty) ? 'error' : ''}`}>\n                        <input onChange={e => name.onChange(e)} onBlur={e => name.onBlur(e)} value={name.value} name=\"name\" type=\"text\" className=\"form__field-input\" placeholder=\"Name\" />\n                        {(name.isDirty && (\n                            name.isEmpty ?\n                                <span className=\"form__field-message\">This field in required</span>\n                            : name.nameError ? \n                                <span className=\"form__field-message\">Only letters allowed</span>\n                            : ''\n                        ))}\n                    </div>\n\n                    \n                    <div className={`form__field ${(number.isDirty && number.isEmpty) ? 'error' : ''}`}>\n                        <input onChange={e => number.onChange(e)} onBlur={e => number.onBlur(e)} value={number.value} name=\"number\" type=\"text\" className=\"form__field-input\" placeholder=\"Number\" />\n                        {(number.isDirty && (\n                            number.isEmpty ?\n                                <span className=\"form__field-message\">This field in required</span>\n                            : number.numberError ? \n                                <span className=\"form__field-message\">Only numbers allowed</span>\n                            : number.minLengthError ? \n                                <span className=\"form__field-message\">Should contain 12 characters</span>\n                            : ''\n                        ))}\n                    </div>\n\n                    <button disabled={!name.inputValid || !number.inputValid} className=\"form__submit\">\n                        <span>Order</span>\n                    </button>\n                </form>\n            </div>\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/spinner.b83a5f2a.svg\";","import { useState, useEffect } from \"react\";\nimport { Card } from \"../Card\";\nimport { Modal } from \"../Modal\";\nimport Spinner from \"../static/images/spinner.svg\";\n\nimport \"./style/index.scss\";\n\nexport const CardBlock = () => {\n\n    const [modalActive, setModalActive] = useState(false);\n    const [cardData, setCardData] = useState({})\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        fetch(\"https://run.mocky.io/v3/b7d36eea-0b3f-414a-ba44-711b5f5e528e\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setIsLoaded(true);\n                setItems(result);\n            },\n            (error) => {\n                setIsLoaded(true);\n                setError(error);\n            }\n        )\n    }, []);\n\n    let cheapestProduct; \n    items.reduce((prev, next, index, array) => {\n        cheapestProduct = array.find(item => item.price === Math.min(prev, next.price))\n        return next.price;\n    }, 0)\n\n    const handleChange = () => {\n        setModalActive(true)\n        setCardData(cheapestProduct)\n    }\n\n    if (error) {\n        return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n        return (\n            <div className=\"loading\">\n                <img src={Spinner} alt=\"spinner\" />\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"cards-block\">\n                <div className=\"container\">\n                    <div className=\"cards-block__body\">\n                        {items.map((item, index) => {\n                            return (\n                                <Card setModalActive={setModalActive} setCardData={setCardData} value={item} key={index} />\n                            )\n                        })}\n                    </div>\n                    <div className=\"cards-block__footer\">\n                        <button className=\"button button--big\" onClick={handleChange} >\n                            Buy cheapest\n                        </button>\n                    </div>\n                    <Modal active={modalActive} setActive={setModalActive} result={cardData}/>\n                </div>\n            </div>\n        )\n    }\n}","import \"./index.scss\";\nimport { CardBlock } from './CardBlock';\n\nfunction App() {\n  return (\n    <CardBlock />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}